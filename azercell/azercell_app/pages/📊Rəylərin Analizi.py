import streamlit as st
import plotly.graph_objects as go
import pandas as pd
import plotly.express as px
import calendar
import numpy as np
from wordcloud import WordCloud
import matplotlib.pyplot as plt


st.set_page_config(page_title="üìäDashboard", layout="centered")

df = pd.read_excel(r'azercell/azercell_app/azercell_instagram_customer_reviews.xlsx')

st.sidebar.image(r"azercell/azercell_app/pages/azercell_telecom_llc_logo.png", use_container_width = True, width = 5)

df = df[df['hesab_adƒ±'] != 'azercell']
df['post_tarix'] = pd.to_datetime(df['post_tarix'], format="%d.%m.%Y").dt.date
df['r…ôy_tarix'] = pd.to_datetime(df['r…ôy_tarix'], format="%d.%m.%Y").dt.date
df['post_saat'] = pd.to_datetime(df['post_saat'], format="%H:%M:%S").dt.time

st.sidebar.title("Filtrl…ôr")

# üìÖ **Post Tarixi Filter**
post_tarix_min, post_tarix_max = df['post_tarix'].min(), df['post_tarix'].max()
col1, col2 = st.sidebar.columns(2)
selected_post_start = col1.date_input("üìÖ Ba≈ülangƒ±c", value=None, min_value=post_tarix_min, max_value=post_tarix_max)
selected_post_end = col2.date_input("üìÖ Son", value=None, min_value=post_tarix_min, max_value=post_tarix_max)

# üìÜ **R…ôy Tarixi Filter**
r…ôy_tarix_min, r…ôy_tarix_max = df['r…ôy_tarix'].min(), df['r…ôy_tarix'].max()
col3, col4 = st.sidebar.columns(2)
selected_r…ôy_start = col3.date_input("üìÜ R…ôy Ba≈ülangƒ±c", value=None, min_value=r…ôy_tarix_min, max_value=r…ôy_tarix_max)
selected_r…ôy_end = col4.date_input("üìÜ R…ôy Son", value=None, min_value=r…ôy_tarix_min, max_value=r…ôy_tarix_max)

# ‚è∞ **Post Saatƒ± Filter**
post_saat_min, post_saat_max = df['post_saat'].min(), df['post_saat'].max()
selected_post_saat_start = st.sidebar.time_input("‚è∞ Saat (Ba≈ülangƒ±c)", value=post_saat_min)
selected_post_saat_end = st.sidebar.time_input("‚è∞ Saat (Son)", value=post_saat_max)

# üëç **B…ôy…ônm…ô Sayƒ± Slider**
like_min, like_max = int(df['post_b…ôy…ônm…ô'].min()), int(df['post_b…ôy…ônm…ô'].max())
like_filter = st.sidebar.slider("üëçüèª B…ôy…ônm…ô Sayƒ±:", min_value=like_min, max_value=like_max, value=(like_min, like_max), format="%d")

# Filtering Data Based on Selections
filtered_data = df.copy()

# üî• **Date Filtering with Flexible Bounds**
if selected_post_start:
    filtered_data = filtered_data[filtered_data['post_tarix'] >= selected_post_start]
if selected_post_end:
    filtered_data = filtered_data[filtered_data['post_tarix'] <= selected_post_end]

if selected_r…ôy_start:
    filtered_data = filtered_data[filtered_data['r…ôy_tarix'] >= selected_r…ôy_start]
if selected_r…ôy_end:
    filtered_data = filtered_data[filtered_data['r…ôy_tarix'] <= selected_r…ôy_end]

# ‚è∞ **Filter by Time**
filtered_data = filtered_data[(filtered_data['post_saat'] >= selected_post_saat_start) & 
                              (filtered_data['post_saat'] <= selected_post_saat_end)]

# üëç **Filter by Likes**
filtered_data = filtered_data[(filtered_data['post_b…ôy…ônm…ô'] >= like_filter[0]) & 
                              (filtered_data['post_b…ôy…ônm…ô'] <= like_filter[1])]

st.markdown(
    """
    <div style="display: flex; align-items: center;">
        <img src="https://seeklogo.com/images/A/azercell-logo-119FFF6347-seeklogo.com.png" width="80">
        <h1 style="margin-left: 10px; margin-bottom: 10px;">M√º≈üt…ôri R…ôyl…ôr Analizi</h1>
    </div>
    """,
    unsafe_allow_html=True
)

user_count = f"üë§ {df['hesab_adƒ±'].nunique()}"   
comment_count = f"üí≠ {df['r…ôy'].shape[0]}"    
average_like = f"‚ù§ {df['post_b…ôy…ônm…ô'].mean():.2f}"

def metric_card(label, value):
    st.markdown(
        f"""
        <div style="text-align: center; padding: 10px; border: 1px solid #ddd; border-radius: 10px; background-color:rgb(66, 26, 94);">
            <p style="font-size: 18px; color:rgb(255, 255, 255); font-weight: bold; margin: 0;">{label}</p>
            <p style="font-size: 24px; color:rgb(255, 223, 223); margin: 0;">{value}</p>
        </div>
        """,
        unsafe_allow_html=True,
    )

col1, col2, col3 = st.columns(3)

with col1:
    metric_card("ƒ∞zl…ôyici Sayƒ±", user_count)

with col2:
    metric_card("R…ôy Sayƒ±", comment_count)

with col3:
    metric_card("Ortalama B…ôy…ônm…ô Sayƒ±", average_like)


# Bar chart
def create_bar_chart_45(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(data=[
        go.Bar(
            x=x_data,
            y=y_data,
            marker=dict(
                color='#6A0DAD',
                line=dict(color='white', width=0.2)
            )
        )
    ])
    fig.update_layout(
        title=title,
        title_font=dict(size=24, family='Verdana', color='white'),
        title_x=0.03,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=70, r=50, t=90, b=90)
    )
    return fig

def create_barh_chart(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(data=[
        go.Bar(
            x=y_data,  
            y=x_data,  
            orientation='h',  
            marker=dict(
                color='#6A0DAD',
                line=dict(color='white', width=0.07)
            )
        )
    ])
    fig.update_layout(
        title=title,
        title_font=dict(size=24, family='Verdana', color='white'),
        title_x=0.1,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=120, r=50, t=90, b=90)  
    )
    return fig

def create_barh_chart_short(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(data=[
        go.Bar(
            x=y_data,  
            y=x_data,  
            orientation='h',  
            marker=dict(
                color='#6A0DAD',
                line=dict(color='white', width=0.07)
            )
        )
    ])
    fig.update_layout(
        title=title,
        title_font=dict(size=24, family='Verdana', color='white'),
        title_x=0.2,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=120, r=50, t=90, b=90)  
    )
    return fig


def create_bar_chart(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(data=[
        go.Bar(
            x=x_data,
            y=y_data,
            marker=dict(
                color='#6A0DAD',
                line=dict(color='white', width=0.07)
            )
        )
    ])
    fig.update_layout(
        title=title,
        title_font=dict(size=24, family='Verdana', color='white'),
        title_x=0.1,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=70, r=50, t=90, b=90)
    )
    return fig

def create_bar_chart_head(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(data=[
        go.Bar(
            x=x_data,
            y=y_data,
            marker=dict(
                color='#6A0DAD',
                line=dict(color='white', width=0.07)
            )
        )
    ])
    fig.update_layout(
        title=title,
        title_font=dict(size=22, family='Verdana', color='white'),
        title_x=0.04,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=70, r=50, t=90, b=90)
    )
    return fig

def create_bar_chart_head1(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(data=[
        go.Bar(
            x=x_data,
            y=y_data,
            marker=dict(
                color='#6A0DAD',
                line=dict(color='white', width=0.07)
            )
        )
    ])
    fig.update_layout(
        title=title,
        title_font=dict(size=22, family='Verdana', color='white'),
        title_x=0.085,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=70, r=50, t=90, b=90)
    )
    return fig

def create_bar_chart_short(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(data=[
        go.Bar(
            x=x_data,
            y=y_data,
            marker=dict(
                color='#6A0DAD',
                line=dict(color='white', width=0.07)
            )
        )
    ])
    fig.update_layout(
        title=title,
        title_font=dict(size=24, family='Verdana', color='white'),
        title_x=0.2,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=70, r=50, t=90, b=90)
    )
    return fig

def create_line_chart(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(go.Scatter(
        x=x_data, 
        y=y_data, 
        mode='lines', 
        fill='tozeroy', 
        fillcolor='rgba(106, 13, 173, 0.3)', 
        line=dict(color='purple')
    ))

    fig.update_layout(
        title=title,
        title_font=dict(size=24, family='Verdana', color='white'),
        title_x=0.2,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=70, r=50, t=90, b=90)
    )

    return fig

def create_line_chart_head(x_data, y_data, title, x_title, y_title):
    fig = go.Figure(go.Scatter(
        x=x_data, 
        y=y_data, 
        mode='lines', 
        fill='tozeroy', 
        fillcolor='rgba(106, 13, 173, 0.3)', 
        line=dict(color='purple')
    ))

    fig.update_layout(
        title=title,
        title_font=dict(size=24, family='Verdana', color='white'),
        title_x=0.1,
        xaxis=dict(
            title=dict(text=x_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        yaxis=dict(
            title=dict(text=y_title, font=dict(size=17, family='Arial', color='white')),
            tickfont=dict(size=14, family='Arial', color='white')
        ),
        plot_bgcolor='black',
        paper_bgcolor='black',
        margin=dict(l=70, r=50, t=90, b=90)
    )

    return fig


# ----

st.header('üìÖ Tarix √úzr…ô Analiz')
st.subheader('üìÜ Tarix √úzr…ô Payla≈üƒ±lan Post Sayƒ±')
st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>x…ôtti qrafikd…ô</strong> post sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['post_tarix'] = pd.to_datetime(filtered_data['post_tarix'])
date_counts = filtered_data.groupby(filtered_data['post_tarix'].dt.date)['post_≈ü…ôkil'].nunique()

fig0 = create_line_chart(date_counts.index, date_counts.values,'Tarix √úzr…ô Payla≈üƒ±lan Post Sayƒ±','Tarix','Post Sayƒ±')
st.plotly_chart(fig0)

st.write(f""">Sample data olduƒüunu n…ôz…ôr…ô alsaq, post payla≈üƒ±mlarƒ± <strong style='color: purple;'>uniform</strong> paylanmaya yaxƒ±ndƒ±r.  
Lakin b…ôzi g√ºnl…ôrd…ô <strong style='color: purple;'>1-d…ôn √ßox</strong> payla≈üƒ±m edilib. Siyahƒ±nƒ± a≈üaƒüƒ±da g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

date_counts = date_counts.to_frame().reset_index()
date_counts = date_counts[date_counts['post_≈ü…ôkil'] > 1] 
date_counts.columns = ['Postun Payla≈üƒ±lma Tarixi','Payla≈üƒ±lan Post Sayƒ±']
date_counts= date_counts.sort_values(by = 'Payla≈üƒ±lan Post Sayƒ±', ascending = False)
date_counts.reset_index(drop = True, inplace = True) 

st.dataframe(date_counts)

# ---

st.subheader('üìÜ Aylar v…ô ƒ∞ll…ôr √úzr…ô Payla≈üƒ±lan Post Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>bar qrafikd…ô</strong> ay v…ô ill…ôr √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

monthly_counts = filtered_data.groupby(filtered_data['post_tarix'].dt.to_period("M"))['post_≈ü…ôkil'].nunique()
months = monthly_counts.index.astype(str)
values = monthly_counts.values

fig1 = create_bar_chart(months, values, 'Aylar v…ô ƒ∞ll…ôr √úzr…ô Payla≈üƒ±lan Post Sayƒ±', 'Ay', 'Post Sayƒ±')
st.plotly_chart(fig1)

st.write(f""">Ad…ôt…ôn, <strong style='color: purple;'>qƒ±≈ü aylarƒ±nda (yanvar / fevral)</strong> payla≈üƒ±lan postlarƒ±n sayƒ±nƒ±n daha az olduƒüunu g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

# ---

st.subheader('üìÖ Aylar √úzr…ô Ortalama Payla≈üƒ±lan Post Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>bar qrafikd…ô</strong> aylar √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['post_tarix_year'] = filtered_data['post_tarix'].dt.year
filtered_data['post_tarix_month'] = filtered_data['post_tarix'].dt.month

monthly_mean = filtered_data.groupby(by=['post_tarix_year', 'post_tarix_month'])['post_≈ü…ôkil'].nunique().reset_index()
monthly_mean = monthly_mean.groupby(by=['post_tarix_month'])['post_≈ü…ôkil'].mean()
months = monthly_mean.index
values = monthly_mean.values.round(2)

fig2 = create_bar_chart_head1(months, values, 'Aylar √úzr…ô Payla≈üƒ±lan Post Sayƒ±nƒ±n Ortalamasƒ±', 'Ay', 'Post Sayƒ±nƒ±n Ortalamasƒ±')
st.plotly_chart(fig2)   

st.write(f""">√úmumilikd…ô, <strong style='color: purple;'>yanvar, fevral v…ô noyabr</strong> aylarƒ±nda daha az post sayƒ± olduƒüu m√º≈üahid…ô edilir. ∆ètraflƒ± m…ôlumatƒ± a≈üaƒüƒ±dakƒ± c…ôdv…ôld…ô g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

monthly_mean = monthly_mean.to_frame().reset_index()
min = monthly_mean['post_≈ü…ôkil'].min()
monthly_mean['post_≈ü…ôkil'] = monthly_mean['post_≈ü…ôkil'].round(1)
monthly_mean['Minimumdan ne√ß…ô d…ôf…ô √ßox'] = monthly_mean['post_≈ü…ôkil'].apply(lambda x: str(round(x/min,1))+ 'x')
monthly_mean.columns = ['Ayƒ±n ƒ∞ndeksi','Ortalama Payla≈üƒ±lan Post Sayƒ±','Minimumdan ne√ß…ô d…ôf…ô √ßox']
st.dataframe(monthly_mean)

# --- 

st.subheader('üìÖ ƒ∞ll…ôr √úzr…ô Toplam Payla≈üƒ±lan Post Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>pie qrafikd…ô</strong> ill…ôr √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

new = filtered_data.groupby(by=['post_tarix_year'])['post_≈ü…ôkil'].nunique().reset_index()
fig3 = px.pie(new, values='post_≈ü…ôkil', names='post_tarix_year', 
              title='ƒ∞ll…ôr √úzr…ô Toplam Payla≈üƒ±lan Post Sayƒ±', hole=0.3,
              color_discrete_sequence=['#4B0082', '#6A0DAD', '#8A2BE2', '#9370DB', '#BA55D3', '#D8BFD8'])

fig3.update_layout(title_font=dict(size=24))
st.plotly_chart(fig3)
    
st.write(f""">Qrafikd…ôn aydƒ±ndƒ±r ki, ild…ôn-il…ô payla≈üƒ±lan post sayƒ± artƒ±b. ∆ètraflƒ± m…ôlumatƒ± a≈üaƒüƒ±dakƒ± c…ôdv…ôld…ô g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

new['post_tarix_year'] = new['post_tarix_year'].apply(lambda x: str(x)) 
min = new['post_≈ü…ôkil'].min()
new['Minimumdan ne√ß…ô d…ôf…ô √ßox'] = new['post_≈ü…ôkil'].apply(lambda x: str(round(x/min,1))+ 'x')
new.columns = ['ƒ∞l','Payla≈üƒ±lan Post Sayƒ±','Minimumdan ne√ß…ô d…ôf…ô √ßox']
st.dataframe(new)

# ---

st.subheader('üìÖ H…ôft…ônin G√ºnl…ôri √úzr…ô Ortalama Payla≈üƒ±lan Post Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> h…ôft…ônin g√ºnl…ôri √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ±n ortalamasƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['post_day_name'] = filtered_data['post_tarix'].dt.day_name()
new = filtered_data.groupby(by=['post_tarix_year', 'post_tarix_month', 'post_day_name'])['post_≈ü…ôkil'].nunique().reset_index()

week_mean = new.groupby(by = 'post_day_name')['post_≈ü…ôkil'].mean()
weekdays = week_mean.index
values = week_mean.values.round(2)

fig4 = create_bar_chart_head1(weekdays, values, 'H…ôft…ô √úzr…ô Payla≈üƒ±lan Post Sayƒ±nƒ±n Ortalamasƒ±', 'H…ôft…ônin G√ºn√º', 'Post Sayƒ±nƒ±n Ortalamasƒ±')
st.plotly_chart(fig4)

st.write(f""">Qrafikd…ôn aydƒ±n olur ki, h…ôft…ô sonuna yaxƒ±nla≈üdƒ±qca <strong style='color: purple;'>(1-5)</strong> g√ºnl…ôrind…ô payla≈üƒ±lan post sayƒ±nƒ±n ortalamasƒ±nda azalma m√º≈üahid…ô edilir.""", unsafe_allow_html=True)

# ---

st.subheader('üìÖ H…ôft…ô ƒ∞√ßi v…ô H…ôft…ô Sonu G√ºnl…ôr √úzr…ô Ortalama Payla≈üƒ±lan Post Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> h…ôft…ô i√ßi v…ô h…ôft…ô sonu g√ºnl…ôr √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ±n ortalamasƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
weekends = ['Saturday', 'Sunday']

week_mean = week_mean.reset_index() 
week_mean['week_type'] = np.where(week_mean['post_day_name'].isin(weekdays), 'Weekday', 'Weekend')
week_mean = week_mean.groupby(by='week_type')['post_≈ü…ôkil'].mean()

weekdays = week_mean.index
values = week_mean.values.round(2)

fig5 = create_bar_chart_head1(weekdays, values, 'H…ôft…ô √úzr…ô Payla≈üƒ±lan Post Sayƒ±sƒ±nƒ±n Ortalamasƒ±', 'H…ôft…ô ƒ∞√ßi/ H…ôft…ô Sonu', 'Post Sayƒ±sƒ±nƒ±n Ortalamasƒ±')
st.plotly_chart(fig5)

st.write(f""">Qrafikd…ôn aydƒ±n olur ki, <strong style='color: purple;'>h…ôft…ô i√ßi v…ô h…ôft…ô sonu</strong> g√ºnl…ôr √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ±n ortalamasƒ±nda n…ôz…ôr…ô√ßarpan f…ôrq yoxdur.""", unsafe_allow_html=True)

# ---

st.subheader('üóØ Tarix √úzr…ô R…ôy Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>x…ôtti qrafikd…ô</strong> √ºmumi tarix √ºzr…ô r…ôy sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data = filtered_data.sort_values(by='r…ôy_tarix')
date_counts = filtered_data['r…ôy_tarix'].value_counts().sort_index()
fig8 = create_line_chart(date_counts.index, date_counts.values,'Tarix √úzr…ô ƒ∞zl…ôyicil…ôrin R…ôy Sayƒ±','Tarix','R…ôy Sayƒ±')
st.plotly_chart(fig8)

# ---

st.subheader('üìÖ Aylar v…ô ƒ∞ll…ôr √úzr…ô R…ôy Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> aylar v…ô ill…ôr √ºzr…ô r…ôy sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['r…ôy_tarix'] = pd.to_datetime(filtered_data['r…ôy_tarix'])
monthly_counts = filtered_data.groupby(filtered_data['r…ôy_tarix'].dt.to_period("M"))['r…ôy'].count()
months = monthly_counts.index.astype(str)
values = monthly_counts.values
fig9 = create_bar_chart_short(months, values, 'Tarix √úzr…ô ƒ∞zl…ôyicil…ôrin R…ôy Sayƒ±', 'Ay', 'R…ôy Sayƒ±')
st.plotly_chart(fig9)

st.write(f""">M…ôlumatƒ±n n√ºmun…ô olduƒüunu n…ôz…ôr…ô alaraq, m…ôlumatda <strong style='color: purple;'>uniform</strong> tendensiya m√º≈üahid…ô edilir.""", unsafe_allow_html=True)

# ---

st.subheader('üìÖ Aylar √úzr…ô Ortalama R…ôy Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> aylar √ºzr…ô ortalama r…ôy sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['r…ôy_tarix_year'] = filtered_data['r…ôy_tarix'].dt.year
filtered_data['r…ôy_tarix_month'] = filtered_data['r…ôy_tarix'].dt.month
new = filtered_data.groupby(by=['r…ôy_tarix_year', 'r…ôy_tarix_month']).agg(r…ôy_count=('r…ôy', 'count')).reset_index()
monthly_mean = new.groupby(by = 'r…ôy_tarix_month')['r…ôy_count'].mean()
months = monthly_mean.index
values = monthly_mean.values.round(2)
fig10 = create_bar_chart_head1(months, values, 'Aylar √úzr…ô ƒ∞zl…ôyicil…ôrin R…ôy Sayƒ±sƒ±nƒ±n Ortalamasƒ±', 'Ay', 'R…ôy Sayƒ±sƒ±nƒ±n Ortalamasƒ±')
st.plotly_chart(fig10)  

# ---

st.subheader('üìÖ ƒ∞ll…ôr √úzr…ô Toplam R…ôy Paylanmasƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>pie qrafikd…ô</strong> ill…ôr √ºzr…ô r…ôy sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

new = filtered_data.groupby(by=['r…ôy_tarix_year']).agg(r…ôy_count=('r…ôy', 'count')).reset_index()
fig11 = px.pie(new, values='r…ôy_count', names='r…ôy_tarix_year', 
              title='ƒ∞ll…ôr √úzr…ô R…ôy Paylanmasƒ±', hole=0.3,
              color_discrete_sequence=['#4B0082', '#6A0DAD', '#8A2BE2', '#9370DB', '#BA55D3', '#D8BFD8'])
fig11.update_layout(title_font=dict(size=24))
st.plotly_chart(fig11)

st.write(f""">Qrafikd…ôn aydƒ±n olur ki, m…ôlumat daxilind…ô …ôks…ôr…ôn <strong style='color: purple;'>2022 (29.8%)</strong> ilin…ô aid qeydl…ôr m√∂vcuddur.""", unsafe_allow_html=True)

# ---

st.subheader('üìÖ H…ôft…ônin G√ºnl…ôri √úzr…ô Ortalama R…ôy Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> h…ôft…ônin g√ºnl…ôri √ºzr…ô ortalama r…ôy sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['r…ôy_day_name'] = filtered_data['r…ôy_tarix'].dt.day_name()
new = filtered_data.groupby(by=['r…ôy_tarix_year', 'r…ôy_tarix_month','r…ôy_day_name']).agg(r…ôy_count=('r…ôy', 'count')).reset_index()
week_mean = new.groupby(by = 'r…ôy_day_name')['r…ôy_count'].mean()
weekdays = week_mean.index
values = week_mean.values.round(2)
fig12 = create_bar_chart_head1(weekdays, values, 'H…ôft…ô √úzr…ô ƒ∞zl…ôyicil…ôrin R…ôy Sayƒ±sƒ±nƒ±n Ortalamasƒ±', 'H…ôft…ônin G√ºn√º', 'R…ôy Sayƒ±nƒ±n Ortalamasƒ±')
st.plotly_chart(fig12)

st.write(f""">Qrafikd…ôn g√∂r√ºn√ºr ki, h…ôft…ôi√ßi g√ºnl…ôrd…ô <strong style='color: purple;'>(1-5)</strong> istifad…ô√ßil…ôr r…ôy yazmaƒüa daha √ßox meylli olurlar. 
T…ôbii ki, burada h…ôm√ßinin postlarƒ±n h…ôft…ô i√ßi daha √ßox payla≈üƒ±lma faktoru da m√∂vcuddur.""", unsafe_allow_html=True)

# ---

st.subheader('üìÖ H…ôft…ô ƒ∞√ßi v…ô H…ôft…ô Sonu G√ºnl…ôr √úzr…ô Ortalama R…ôy Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> h…ôft…ô i√ßi v…ô h…ôft…ô sonu g√ºnl…ôr √ºzr…ô ortalama r…ôy sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
weekends = ['Saturday', 'Sunday']

week_mean = week_mean.reset_index() 
week_mean['week_type'] = np.where(week_mean['r…ôy_day_name'].isin(weekdays), 'Weekday', 'Weekend')
week_mean = week_mean.groupby(by='week_type')['r…ôy_count'].mean()

weekdays = week_mean.index
values = week_mean.values.round(2)

fig13 = create_bar_chart_head(weekdays, values, 'H…ôft…ô √úzr…ô ƒ∞zl…ôyicil…ôrin R…ôy Sayƒ±sƒ±nƒ±n Ortalamasƒ±', 'H…ôft…ô ƒ∞√ßi/Sonu', 'R…ôy Sayƒ±sƒ±nƒ±n Ortalamasƒ±')
st.plotly_chart(fig13)

st.write(f""">Bu qrafikd…ôn aydƒ±n g√∂r√ºn√ºr ki, h…ôft…ôi√ßi g√ºnl…ôrd…ô <strong style='color: purple;'>(1-5)</strong> istifad…ô√ßil…ôr daha √ßox r…ôy yazƒ±rlar.""", unsafe_allow_html=True)

# ---

st.header('‚è≤ Zaman √úzr…ô Analiz')
st.subheader('‚è∞ Zaman √úzr…ô Payla≈üƒ±lan Post Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>x…ôtti qrafikd…ô</strong> zaman √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['post_saat'] = pd.to_datetime(filtered_data['post_saat'], format="%H:%M:%S")
time_counts = filtered_data.groupby(filtered_data['post_saat'].dt.hour)['post_≈ü…ôkil'].nunique()

fig6 = create_line_chart(time_counts.index, time_counts.values, 'Zaman √úzr…ô Payla≈üƒ±lan Post Sayƒ±', 'Saat', 'Post Sayƒ±')
st.plotly_chart(fig6)

st.write(f""">Bu qrafikd…ôn aydƒ±n g√∂r√ºn√ºr ki, postlar ad…ôt…ôn <strong style='color: purple;'>s…ôh…ôr saatlarƒ±nda</strong> v…ô 
<strong style='color: purple;'>ax≈üam (i≈ü √ßƒ±xƒ±≈üƒ±)</strong> saatlarƒ±nda payla≈üƒ±lƒ±r. (T…ôbii ki, burada h…ôft…ônin g√ºn√º v…ô h…ôft…ô i√ßi/sonu faktoru da rol oynayƒ±r.)""", unsafe_allow_html=True)

# --- 

st.subheader('‚è∞ G√ºn√ºn M√ºxt…ôlif Hiss…ôl…ôri √úzr…ô Payla≈üƒ±lan Post Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> g√ºn√ºn m√ºxt…ôlif hiss…ôl…ôri √ºzr…ô payla≈üƒ±lan post sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

filtered_data['post_saat'] = pd.to_datetime(filtered_data['post_saat'], format="%H:%M:%S").dt.hour

filtered_data['time_segment'] = pd.cut(
    filtered_data['post_saat'],
    bins=[2, 11, 15, 20],
    labels=['S…ôh…ôr', 'G√ºnorta', 'Ax≈üam'],
)

time_segment_counts = filtered_data.groupby(by = ['time_segment'])['post_≈ü…ôkil'].nunique()

fig7 = create_bar_chart(time_segment_counts.index, time_segment_counts.values, 'G√ºn√ºn Hiss…ôl…ôri √úzr…ô Payla≈üƒ±lan Post Sayƒ±', 'G√ºn√ºn Hiss…ôl…ôri', 'Post Sayƒ±')
st.plotly_chart(fig7)

st.write(f""">Bu qrafikd…ôn aydƒ±n g√∂r√ºn√ºr ki, <strong style='color: purple;'>g√ºnorta saatlarƒ±nda</strong>, 
<strong style='color: purple;'>s…ôh…ôr v…ô ax≈üam (i≈ü √ßƒ±xƒ±≈üƒ±)</strong> saatlarƒ±na nisb…ôt…ôn daha az post payla≈üƒ±lƒ±r.""", unsafe_allow_html=True)

# --- 

st.header('üìä Instagram Hesablarƒ± √úzr…ô Analiz')

st.subheader('üìÖ Tarix √úzr…ô Unikal Hesab Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> tarix √ºzr…ô unikal istifad…ô√ßi sayƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

new = filtered_data.groupby(by=['r…ôy_tarix_year', 'r…ôy_tarix_month'])['hesab_adƒ±'].nunique().reset_index()
new['Tarix'] = new['r…ôy_tarix_year'].astype(str) + "-" + new['r…ôy_tarix_month'].astype(str)

weekdays = new['Tarix']
values = new['hesab_adƒ±']

fig13 = create_bar_chart_short(weekdays, values, 'Tarix √úzr…ô Unikal Hesab Sayƒ±sƒ±', 'Tarix', 'Unikal Hesab Sayƒ±')
st.plotly_chart(fig13)

# --- 

st.subheader('üìä Tarix √úzr…ô Kumulativ Unikal Hesab Sayƒ±')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>s√ºtun qrafikd…ô</strong> is…ô istifad…ô√ßi sayƒ±nƒ±n kumulativ c…ômini g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

new = filtered_data.groupby(by=['r…ôy_tarix_year', 'r…ôy_tarix_month'])['hesab_adƒ±'].nunique().reset_index()
new['Tarix'] = new['r…ôy_tarix_year'].astype(str) + "-" + new['r…ôy_tarix_month'].astype(str)

new['Kumulativ_Hesab_Sayƒ±'] = new['hesab_adƒ±'].cumsum()

tarixl…ôr = new['Tarix']
kumulativ_d…ôy…ôrl…ôr = new['Kumulativ_Hesab_Sayƒ±']

fig14 = create_line_chart_head(tarixl…ôr, kumulativ_d…ôy…ôrl…ôr, 'Tarix √úzr…ô Kumulativ Unikal Hesab Sayƒ±sƒ±', 'Tarix', 'Kumulativ Unikal Hesab Sayƒ±')
st.plotly_chart(fig14)

# --- 

st.subheader('üë• R…ôy Sayƒ±na G√∂r…ô Top Hesablar')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>horizontal s√ºtun qrafikd…ô</strong> top n …ôn √ßox comment yazan istifad…ô√ßil…ôri g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

top_n = st.number_input("Top ne√ß…ô  hesab g√∂st…ôrilsin?", min_value=1, value=5, step=1)
new = filtered_data.groupby(by=['hesab_adƒ±']).agg(r…ôy_count=('r…ôy', 'count')).reset_index()
new.sort_values(by='r…ôy_count', ascending=False, inplace=True)
new = new.head(top_n)
new.sort_values(by='r…ôy_count', ascending=False, inplace=True)

fig15 = create_barh_chart_short(new['hesab_adƒ±'], new['r…ôy_count'], 
                          'R…ôy Sayƒ±na G√∂r…ô Top Hesablar', 'Instagram Hesabƒ±', 'R…ôy Sayƒ±')
st.plotly_chart(fig15)

# --- 

st.subheader('üëç R…ôyl…ôrin B…ôy…ônm…ô Sayƒ±na G√∂r…ô Top Hesablar')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>horizontal s√ºtun qrafikd…ô</strong> …ôn √ßox b…ôy…ônil…ôn top n kommentl…ôrini v…ô onlarƒ± yazan istifad…ô√ßil…ôri g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

top_n1 = st.number_input("B…ôy…ônilm…ô sayƒ±na g√∂r…ô top ne√ß…ô hesab g√∂st…ôrilsin?", min_value=1, value=5, step=1)

new = filtered_data.groupby(by=['hesab_adƒ±']).agg(b…ôy…ônm…ô_max =('r…ôy_b…ôy…ônm…ô', 'max')).reset_index()
new.sort_values(by='b…ôy…ônm…ô_max', ascending=False, inplace=True)
new = new.head(top_n1)
new.sort_values(by='b…ôy…ônm…ô_max', ascending=False, inplace=True)

fig16 = create_barh_chart(new['hesab_adƒ±'], new['b…ôy…ônm…ô_max'], 
                          'R…ôyl…ôrin B…ôy…ônilm…ô Sayƒ±na G√∂r…ô Hesablar', 'Instagram Hesabƒ±', 'R…ôyin B…ôy…ônilm…ô Sayƒ±')
st.plotly_chart(fig16)

# --- 

emoji = filtered_data[~pd.isna(filtered_data['emoji'])]
emoji_sentiment_mapping = {
    'Positive': [
        'üéä', 'üôå', 'üî•', 'üß®', 'ü§©', 'üíê', 'üé∏', '‚ô•', 'üíì', 'üòÑ', 'üíó',
        'üéà', 'üå∫', 'üòÅ', 'üëå', 'üçÄ', 'üçÇ', 'ü§§', 'üòç', 'üí´', '‚ú®', 'ü´∂',
        '‚úî', 'ü•ã', 'üéÅ', 'üéÜ', 'üß°', 'ü§Ø', '‚ù§', 'üéâ', 'üòÄ', 'üë¨', 'üåπ',
        'üôÇ', 'ü•∞', 'ü§ó', 'üíö', 'üëã', 'üíÉ', 'ü§£', 'üòé', 'üíØ', 'üöÄ', '‚úÖ',
        'üíû', 'üíñ', 'ü¶Ñ', 'üíú', 'üíò', 'üíµ', 'üíô', 'ü•≥','‚ù§Ô∏è','üëè','üôè','üòÇ','üòÉ','üòä'
    ],
    'Negative': [
        'üòû', 'üëé', 'üò°', 'ü§ß', 'üòí', 'ü•Ä', 'üíî', 'üò±', 'üò¢', 'üíî', 'üò≠',
        'üòì', 'üòî', 'üò∞', 'üò±', 'üòë', 'üòê', 'üòÜ', 'ü§¢', 'ü§Æ', 'ü•≤', 'üòø',
        'üí•', '‚ùå', 'üëø', 'üòï', 'üò§', '‚ö†Ô∏è', 'üò£', 'üôÑ', '‚ö°', 'ü•¥', 'üò¥'
    ],
    'Neutral': [
        'üëÖ', 'üòÆ', 'üèê', 'üôÉ', 'ùë®', 'ùóø', 'üñ®', 'ùíé', 'üèæ', 'üá±', 'ü´°',
        'üññ', 'ùöÜ', 'ùôΩ', 'ùöï', 'ùó≤', 'üõº', 'üëà', 'ùó∏', 'ùô∑', 'üìç', 'üì§',
        '‚†Ä', '‚òù', 'üåæ', 'üèû', 'ùíì', 'ùêç', '‚§µ', 'üßë', 'üèΩ', 'ùöç', 'ùíä',
        'ùô∏', 'üìù', 'üá∑', 'üèÉ', 'üíÇ', 'üñ§', 'üî∑', 'üõë', 'üèò', 'üì±', 'üìù',
        'üòê', 'üßæ', 'üéá', 'üí´', 'üí™', 'üíö', 'üí∞', 'üìâ', 'üñê', 'üì©', 'üíº',
        'üöó', 'üìÉ', 'üí∏', 'üìù', 'üì≤', 'üìä', 'üìù', 'üìö', '‚úç', 'üìí', '‚úè',
        'üçÅ', 'üìù', 'üå∏', 'üìå', 'üì¶', 'üèÄ', 'üìç', 'üìû', 'üìù', 'üèÜ', '‚¨Ü',
        'üèû', 'üì±', 'üóì', 'üõã', 'üé∏', '‚öΩ', '‚è≥', 'üçÉ', 'üìë', 'ü¶æ'
    ]
}


emojies = ['üéä', 'üôå', 'üî•', 'üß®', 'ü§©', 'üíê', 'üé∏', '‚ô•', 'üíì','üòÇ','üòÉ','üòä', 'üòÑ', 'üíó',
        'üéà', 'üå∫', 'üòÅ', 'üëå', 'üçÄ', 'üçÇ', 'ü§§', 'üòç', 'üí´', '‚ú®', 'ü´∂',
        '‚úî', 'ü•ã', 'üéÅ', 'üéÜ', 'üß°', 'ü§Ø', '‚ù§', 'üéâ', 'üòÄ', 'üë¨', 'üåπ',
        'üôÇ', 'ü•∞', 'ü§ó', 'üíö', 'üëã', 'üíÉ', 'ü§£', 'üòé', 'üíØ', 'üöÄ', '‚úÖ',
        'üíû', 'üíñ', 'ü¶Ñ', 'üíú', 'üíò', 'üíµ', 'üíô', 'ü•≥','‚ù§Ô∏è','üëè','üôè',
        'üòû', 'üëé', 'üò°', 'ü§ß', 'üòí', 'ü•Ä', 'üíî', 'üò±', 'üò¢', 'üíî', 'üò≠',
        'üòì', 'üòî', 'üò∞', 'üò±', 'üòë', 'üòê', 'üòÜ', 'ü§¢', 'ü§Æ', 'ü•≤', 'üòø',
        'üí•', '‚ùå', 'üëø', 'üòï', 'üò§', '‚ö†Ô∏è', 'üò£', 'üôÑ', '‚ö°', 'ü•¥', 'üò¥',
        'üëÖ', 'üòÆ', 'üèê', 'üôÉ', 'ùë®', 'ùóø', 'üñ®', 'ùíé', 'üèæ', 'üá±', 'ü´°',
        'üññ', 'ùöÜ', 'ùôΩ', 'ùöï', 'ùó≤', 'üõº', 'üëà', 'ùó∏', 'ùô∑', 'üìç', 'üì§',
        '‚†Ä', '‚òù', 'üåæ', 'üèû', 'ùíì', 'ùêç', '‚§µ', 'üßë', 'üèΩ', 'ùöç', 'ùíä',
        'ùô∏', 'üìù', 'üá∑', 'üèÉ', 'üíÇ', 'üñ§', 'üî∑', 'üõë', 'üèò', 'üì±', 'üìù',
        'üòê', 'üßæ', 'üéá', 'üí´', 'üí™', 'üíö', 'üí∞', 'üìâ', 'üñê', 'üì©', 'üíº',
        'üöó', 'üìÉ', 'üí∏', 'üìù', 'üì≤', 'üìä', 'üìù', 'üìö', '‚úç', 'üìí', '‚úè',
        'üçÅ', 'üìù', 'üå∏', 'üìå', 'üì¶', 'üèÄ', 'üìç', 'üìû', 'üìù', 'üèÜ', '‚¨Ü',
        'üèû', 'üì±', 'üóì', 'üõã', 'üé∏', '‚öΩ', '‚è≥', 'üçÉ', 'üìë', 'ü¶æ']
    

def get_sentiment_for_emoji(emoji):
    emoji_list = list(emoji)
    for i in emoji_list:
        if i in emojies: 
            emoji = i
            break
        else:
            continue

    for sentiment, emojis in emoji_sentiment_mapping.items():
        if emoji in emojis:
            return sentiment
    return 'Neutral'


emoji['emoji_sentiment'] = emoji['emoji'].apply(lambda x: get_sentiment_for_emoji(x))
all_emojis = "".join(emoji['emoji'])
st.subheader("üòä ƒ∞stifad…ô Edil…ôn Emojil…ôr")
emoji.reset_index(inplace = True, drop = True)

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>c…ôdv…ôld…ô</strong> emoji istifad…ô edil…ôn r…ôyl…ôri v…ô onlarƒ±n sentiment kateqoriyasƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

sentiment_choice = st.radio("Filter by Sentiment:", ["All", "Positive", "Negative", "Neutral"])

if sentiment_choice != "All":
    df_filtered = emoji[emoji['emoji_sentiment'] == sentiment_choice]
else:
    df_filtered = emoji

st.dataframe(df_filtered[['hesab_adƒ±','r…ôy','emoji','emoji_sentiment']])

# ---

st.subheader("üòä Emoji ƒ∞stifad…ô Edil…ôn R…ôyl…ôrin Sentiment Paylanmasƒ±")

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>pie qrafikd…ô</strong> emoji istifad…ô edil…ôn r…ôyl…ôrin sentiment paylanmasƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

new = emoji.groupby(by=['emoji_sentiment']).agg(r…ôy_count=('r…ôy', 'count')).reset_index()
fig17 = px.pie(new, values='r…ôy_count', names='emoji_sentiment', 
              title='R…ôyl…ôrin Sentiment √ºzr…ô Paylanmasƒ±', hole=0.3,
              color_discrete_sequence=['#4B0082', '#8A2BE2', '#9370DB', '#D8BFD8'])
fig17.update_layout(title_font=dict(size=24))
st.plotly_chart(fig17)

# ---

st.subheader("üß† Semantik Analiz")

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>c…ôdv…ôld…ô</strong> istifad…ô√ßi r…ôyl…ôrinin semantik kateqoriyasƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

semantic_choice = st.radio("Filter by Sentiment:", ["All", "T…ôrif", "≈ûikay…ôt", "Sual", 'Ba≈üqa'])

if semantic_choice != "All":
    semantik = filtered_data[filtered_data['r…ôyin_kateqoriyasƒ±_z_s_c'] == semantic_choice]
    semantik.reset_index(inplace = True, drop = True)
else:
    semantik = filtered_data
    semantik.reset_index(inplace = True, drop = True)

semantik = semantik[['hesab_adƒ±','r…ôy', 'T…ôrif','Ba≈üqa','Sual','≈ûikay…ôt','r…ôyin_kateqoriyasƒ±_z_s_c']]
semantik.columns = ['Hesab Adƒ±','R…ôy', 'T…ôrif Ehtimalƒ±','Ba≈üqa Ehtimalƒ±','Sual Ehtimalƒ±','≈ûikay…ôt Ehtimalƒ±','R…ôyin Kateqoriyasƒ±']
st.dataframe(semantik)

# ---

st.subheader('üìä √úmumi R…ôyl…ôr √úzr…ô Semantik Kateqoriya il…ô Paylanma')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>pie qrafikd…ô</strong> istifad…ô√ßi r…ôyl…ôrinin semantik paylanmasƒ±nƒ± g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

new = filtered_data.groupby(by=['r…ôyin_kateqoriyasƒ±_z_s_c']).agg(r…ôy_count=('r…ôy', 'count')).reset_index()
fig18 = px.pie(new, values='r…ôy_count', names='r…ôyin_kateqoriyasƒ±_z_s_c', 
              title='R…ôyl…ôrin Semantik Kateqoriya √ºzr…ô Paylanmasƒ±', hole=0.3,
              color_discrete_sequence=['#4B0082', '#8A2BE2', '#9370DB', '#D8BFD8'])
fig18.update_layout(title_font=dict(size=24))
st.plotly_chart(fig18)

# ---

st.subheader('üí¨ ≈ûikay…ôtl…ôr Kateqoriyasƒ± √úzr…ô ∆èn √áox B…ôy…ônil…ôn R…ôyl…ôr')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>c…ôdv…ôld…ô</strong> is…ô semantik kateqoriyasƒ± ≈üikay…ôt olan, …ôn √ßox b…ôy…ônil…ôn top r…ôyl…ôri g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

top_sikayet = st.number_input("Top ne√ß…ô r…ôy g√∂st…ôrilsin?", min_value=1, value=5, step=1)

new = filtered_data.loc[
    (filtered_data['r…ôyin_kateqoriyasƒ±_z_s_c'] == '≈ûikay…ôt') & 
    (filtered_data['emoji'].isna())
]
new = new.groupby(by=['hesab_adƒ±','r…ôy']).agg(B…ôy…ônm…ô_Sayƒ± =('r…ôy_b…ôy…ônm…ô', 'max')).reset_index()
new.sort_values(by='B…ôy…ônm…ô_Sayƒ±', ascending=False, inplace=True)
new = new.head(top_sikayet)
new.sort_values(by='B…ôy…ônm…ô_Sayƒ±', ascending=False, inplace=True)
new.reset_index(inplace = True, drop = True)
st.dataframe(new)

st.subheader('‚ö†Ô∏è ≈ûikay…ôtl…ôr Arasƒ±nda F…ôrqli Hallar')

st.write(f""">A≈üaƒüƒ±dakƒ± <strong style='color: purple;'>c…ôdv…ôld…ô</strong> f…ôrqli hesablardan eyni m…ôzmunda olan <strong style='color: purple;'>(boykot xarakterli)</strong> ≈üikay…ôt r…ôyl…ôrini g√∂r…ô bil…ôrsiniz.""", unsafe_allow_html=True)

case = df[df['r…ôy'].str.contains('qƒ±nayƒ±r', case=False, na=False)]
case = case.reset_index(drop = True)
st.dataframe(case)

st.markdown("---")

st.markdown(
    """
    <div style="display: flex; justify-content: center;">
        <img src="https://olaylar.az/media/2019/11/09/loqo_yeni-azercell.png" width="280">
    </div>
    """, unsafe_allow_html=True)


# ‚úÖDone
